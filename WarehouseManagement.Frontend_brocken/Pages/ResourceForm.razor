@page "/resources/form"
@page "/resources/form/{id:guid}"

@using WarehouseManagement.Domain
@using WarehouseManagement.WebAPI.Models.WarehouseResource
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>@(IsNew ? "Новый ресурс" : "Ресурс")</PageTitle>

<h1>@(IsNew ? "Новый ресурс" : "Ресурс")</h1>

<EditForm Model="@resourceDto" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Наименование:</label>
        <InputText id="name" class="form-control" @bind-Value="resourceDto.Name" />
        <ValidationMessage For="@(() => resourceDto.Name)" />
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <button type="submit" class="btn btn-primary me-2">Сохранить</button>

    @if (!IsNew)
    {
        <button type="button" class="btn @(resourceDto.State == WorkingState.Archived ? "btn-success" : "btn-warning") me-2" @onclick="ToggleState">
            @(resourceDto.State == WorkingState.Archived ? "В работу" : "В архив")
        </button>
        <button type="button" class="btn btn-danger" @onclick="Delete">Удалить</button>
    }
    <button type="button" class="btn btn-secondary ms-2" @onclick="GoBack">Назад</button>
</EditForm>

@code {
    [Parameter] public Guid? Id { get; set; }

    private bool IsNew => !Id.HasValue;
    private CreateResourceDto resourceDto = new() { State = WorkingState.Working }; // По умолчанию новый ресурс - рабочий
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (!IsNew)
        {
            try
            {
                // Получаем данные ресурса для редактирования
                // Предполагается, что у API есть эндпоинт для получения одного ресурса, например, GET /api/resources/{id}
                // Так как его нет, делаем запрос ко всем и фильтруем
                var allResources = await Http.GetFromJsonAsync<List<WarehouseResource>>("api/resources/1") ?? new List<WarehouseResource>();
                var resourceFromApi = allResources.FirstOrDefault(r => r.Id == Id) ?? await Http.GetFromJsonAsync<WarehouseResource>($"api/resources/2").FirstOrDefaultAsync(r => r.Id == Id);

                if (resourceFromApi != null)
                {
                    // Маппинг из доменной сущности в DTO
                    resourceDto = new UpdateResourceDto
                    {
                        Name = resourceFromApi.Name,
                        State = resourceFromApi.State
                    };
                }
                else
                {
                    errorMessage = "Ресурс не найден.";
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Ошибка загрузки ресурса: {ex}");
                errorMessage = "Ошибка при загрузке данных ресурса.";
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        errorMessage = string.Empty;
        try
        {
            if (IsNew)
            {
                var createDto = new CreateResourceDto { Name = resourceDto.Name, State = resourceDto.State };
                var response = await Http.PostAsJsonAsync("api/resources", createDto);
                response.EnsureSuccessStatusCode();
                var newResourceId = await response.Content.ReadFromJsonAsync<Guid>();
                Console.WriteLine($"Ресурс создан с ID: {newResourceId}");
            }
            else if (Id.HasValue)
            {
                var updateDto = new UpdateResourceDto { Name = resourceDto.Name, State = resourceDto.State };
                var response = await Http.PatchAsJsonAsync($"api/resources/{Id.Value}", updateDto);
                response.EnsureSuccessStatusCode();
                Console.WriteLine("Ресурс обновлён.");
            }
            GoBack(); // Перенаправляем на список после сохранения
        }
        catch (HttpRequestException httpEx)
        {
            // Обработка ошибок валидации от сервера, если они возвращаются в теле ответа
            if (httpEx.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                try
                {
                    var errorContent = await httpEx.GetBaseException().Message; // Простой способ, можно парсить JSON
                    errorMessage = $"Ошибка сохранения: {errorContent}";
                }
                catch
                {
                    errorMessage = "Ошибка сохранения: Некорректные данные.";
                }
            }
            else
            {
                errorMessage = $"Ошибка сети: {httpEx.Message}";
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Ошибка сохранения ресурса: {ex}");
            errorMessage = "Произошла ошибка при сохранении.";
        }
    }


    private async Task ToggleState()
    {
        if (!Id.HasValue) return;

        try
        {
            var newState = resourceDto.State == WorkingState.Archived ? WorkingState.Working : WorkingState.Archived;
            var updateDto = new UpdateResourceDto { Name = resourceDto.Name, State = newState };
            var response = await Http.PatchAsJsonAsync($"api/resources/{Id.Value}", updateDto);
            response.EnsureSuccessStatusCode();
            resourceDto.State = newState;
            Console.WriteLine($"Состояние ресурса изменено на {newState}.");
            StateHasChanged(); // Обновляем UI
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Ошибка изменения состояния ресурса: {ex}");
            errorMessage = "Ошибка при изменении состояния ресурса.";
        }
    }

    private async Task Delete()
    {
        if (!Id.HasValue) return;

        try
        {
            var response = await Http.DeleteAsync($"api/resources/{Id.Value}");
            response.EnsureSuccessStatusCode();
            Console.WriteLine("Ресурс удалён.");
            GoBack(); // Перенаправляем на список после удаления
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Ошибка удаления ресурса: {ex}");
            errorMessage = "Ошибка при удалении ресурса.";
        }
    }

    private void GoBack()
    {
        // Определяем, на какую страницу ресурсов возвращаться, основываясь на текущем состоянии
        var backState = resourceDto?.State == WorkingState.Archived ? 2 : 1;
        Navigation.NavigateTo($"/resources/{backState}");
    }
}