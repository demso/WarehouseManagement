@page "/resources/{stateSegment}"
@using WarehouseManagement.Contracts.Models.WarehouseResource
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>@(IsArchived ? "Архивные ресурсы" : "Ресурсы")</PageTitle>

<h1>@(IsArchived ? "Архивные ресурсы" : "Ресурсы")</h1>

@if (IsLoading)
{
    <p><em>Загрузка...</em></p>
}
else
{
    @if (!IsArchived) // Кнопки только на странице рабочих ресурсов
    {
        <div class="mb-3">
            <button class="btn btn-primary me-2" @onclick="GoToAdd">Добавить</button>
            <button class="btn btn-secondary" @onclick="GoToArchived">К архивным</button>
        </div>
    }
    else // Кнопка "К рабочим" на странице архивных ресурсов
    {
        <div class="mb-3">
            <button class="btn btn-secondary" @onclick="GoToWorking">К рабочим</button>
        </div>
    }

    @if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else if (resources == null || !resources.Any())
    {
        <p><em>Ресурсы не найдены.</em></p>
    }
    else
    {
        <table class="table-bordered">
            <thead>
                <tr>
                    <th>Наименование</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var resource in resources)
                {
                    <tr @onclick="() => GoToEdit(resource.Id)" style="cursor: pointer;">
                        <td>@resource.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [Parameter] public string stateSegment { get; set; } = string.Empty;

    private bool IsArchived => string.Equals(stateSegment, "archived", StringComparison.OrdinalIgnoreCase);
    private List<WarehouseResourceDto>? resources;
    private bool IsLoading = true;
    private string? errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        // Сброс состояния при изменении параметра
        resources = null;
        errorMessage = null;
        IsLoading = true;
        StateHasChanged(); // Обновляем UI, чтобы показать "Загрузка..."

        try
        {
            // Определяем состояние для запроса к API
            var apiState = IsArchived ? "Archived" : "Working"; // Передаем строковое значение
            resources = await Http.GetFromJsonAsync<List<WarehouseResourceDto>>($"api/resources/getall/{apiState}") ?? new();
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка загрузки ресурсов: {ex.Message}";
            Console.Error.WriteLine($"Ошибка загрузки ресурсов: {ex}");
        }
        finally
        {
            IsLoading = false;
        }
    }


    private void GoToAdd()
    {
        Navigation.NavigateTo("/resources/form/");
    }

    private void GoToArchived()
    {
        Navigation.NavigateTo("/resources/archived");
    }

    private void GoToWorking()
    {
        Navigation.NavigateTo("/resources/working");
    }

    private void GoToEdit(Guid id)
    {
        Navigation.NavigateTo($"/resources/form/{id}");
    }
}