@page "/resources/form/"
@page "/resources/form/{id:guid}"
@using System.Text.Json
@using WarehouseManagement.Contracts.Models.WarehouseResource
@using WarehouseManagement.Domain
@using WarehouseManagement.Frontend.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILogger<ResourceForm> Logger
@inject INotificationManager NotificationManager

<PageTitle>@(IsNew ? "Новый ресурс" : "Ресурс")</PageTitle>

<h1>@(IsNew ? "Новый ресурс" : "Ресурс")</h1>

@if (_isLoading)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <EditForm Model="@_resourceModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <button type="submit" class="btn btn-primary me-2">Сохранить</button>

        @if (!IsNew)
        {
            <button type="button" class="btn @(_resourceModel.State == WorkingState.Archived ? "btn-success" : "btn-warning") me-2" @onclick="ToggleState">
                @(_resourceModel.State == WorkingState.Archived ? "В работу" : "В архив")
            </button>
            <button type="button" class="btn btn-danger" @onclick="Delete">Удалить</button>
        }
        <button type="button" class="btn btn-secondary ms-2" @onclick="GoBack">Назад</button>

        <div class="mb-3">
            <label for="name" class="form-label">Наименование:</label>
            <InputText id="name" class="form-control" @bind-Value="_resourceModel.Name" />
            <ValidationMessage For="@(() => _resourceModel.Name)" />
        </div>

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @_errorMessage
            </div>
        }
    </EditForm>
}

@code {
    [Parameter] public Guid? Id { get; set; }

    private bool IsNew => !Id.HasValue;
    private WarehouseResource _resourceModel = null!;
    private string _errorMessage = string.Empty;
    private bool _isLoading;
    private WorkingState _originalState;

    protected override async Task OnParametersSetAsync()
    {
        // Сброс состояния при изменении параметра
        _resourceModel = new WarehouseResource { Id = Id ?? Guid.Empty, Name = string.Empty, State = WorkingState.Working };
        _errorMessage = string.Empty;
        _isLoading = true;
        _originalState = WorkingState.Working;

        if (!IsNew)
        {
            try
            {
                var resourceDto = await Http.GetFromJsonAsync<WarehouseResourceDto>($"api/resources/get/{Id!.Value}");
                if (resourceDto != null)
                {
                    _resourceModel.Name = resourceDto.Name;
                    _resourceModel.State = resourceDto.State;
                    _originalState = resourceDto.State;
                }
                else
                {
                    _errorMessage = "Ресурс не найден.";
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("Ошибка загрузки ресурса: {Exception}", ex);
                _errorMessage = "Ошибка при загрузке данных ресурса.";
            }
        }
        else
        {
            _resourceModel.State = WorkingState.Working;
            _originalState = WorkingState.Working;
        }
        _isLoading = false;
    }
      
    private async Task HandleValidSubmit()
    {
        _errorMessage = string.Empty;
        try
        {
            HttpResponseMessage response;
            if (IsEmpty(_resourceModel.Name))
            {
                NotificationManager.ShowError("Ошибка", "Наименование не должно быть пустым");
                return;
            }
            if (IsNew)
            {
                var createDto = new CreateResourceDto { Name = _resourceModel.Name, State = _resourceModel.State };
                response = await Http.PostAsJsonAsync("api/resources/add", createDto);
            }
            else if (Id.HasValue)
            {
                var updateDto = new UpdateResourceDto { Id = Id.Value, Name = _resourceModel.Name, State = null };
                response = await Http.PatchAsJsonAsync($"api/resources/update/{Id.Value}", updateDto);
            }
            else
            {
                _errorMessage = "Неверное состояние формы.";
                NotificationManager.ShowError("Ошибка", _errorMessage);
                return;
            }

            if (response.IsSuccessStatusCode)
            {
                NotificationManager.ShowSuccess("Успех", IsNew ? "Ресурс создан успешно!" : "Ресурс обновлён успешно!");
                GoBack();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var apiErrorMessage = GetMessageFromApiError(errorContent);
                _errorMessage = $"Ошибка API: {response.StatusCode} - {apiErrorMessage}";
                NotificationManager.ShowError("Ошибка API", _errorMessage);
            }
        }
        catch (HttpRequestException httpEx)
        {
            Logger.LogError("Ошибка HTTP при сохранении ресурса: {HttpRequestException}", httpEx);
            _errorMessage = $"Ошибка сети: {httpEx.Message}";
            NotificationManager.ShowError("Ошибка сети", _errorMessage);
        }
        catch (Exception ex)
        {
            Logger.LogError("Ошибка сохранения ресурса: {Exception}", ex);
            _errorMessage = "Произошла ошибка при сохранении.";
            NotificationManager.ShowError("Ошибка", _errorMessage);
        }
    }

    private async Task ToggleState()
    {
        if (!Id.HasValue) return;
        try
        {
            var newState = _resourceModel.State == WorkingState.Archived ? WorkingState.Working : WorkingState.Archived;
            var updateDto = new UpdateResourceDto { Id = Id.Value, Name = null, State = newState };
            var response = await Http.PatchAsJsonAsync($"api/resources/update/{Id.Value}", updateDto);

            if (response.IsSuccessStatusCode)
            {
                _resourceModel.State = newState;
                _originalState = newState;
                Logger.LogInformation("Состояние ресурса изменено на {WorkingState}.", newState);
                NotificationManager.ShowSuccess("Успех", $"Состояние ресурса изменено на {(newState == WorkingState.Working ? "Рабочий" : "Архивный")}.");
                StateHasChanged();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var apiErrorMessage = GetMessageFromApiError(errorContent);
                _errorMessage = $"Ошибка изменения состояния: {response.StatusCode} - {apiErrorMessage}";
                NotificationManager.ShowError("Ошибка", _errorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Ошибка изменения состояния ресурса: {Exception}", ex);
            _errorMessage = "Ошибка при изменении состояния ресурса.";
            NotificationManager.ShowError("Ошибка", _errorMessage);
        }
    }

    private async Task Delete()
    {
        if (!Id.HasValue) return;
        try
        {
            var response = await Http.DeleteAsync($"api/resources/delete/{Id.Value}");
            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("Ресурс удалён.");
                NotificationManager.ShowSuccess("Успех", "Ресурс успешно удалён.");
                GoBack();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var apiErrorMessage = GetMessageFromApiError(errorContent);
                _errorMessage = $"Ошибка удаления: {response.StatusCode} - {apiErrorMessage}";
                NotificationManager.ShowError("Ошибка", _errorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Ошибка удаления ресурса: {Exception}", ex);
            _errorMessage = "Ошибка при удалении ресурса.";
            NotificationManager.ShowError("Ошибка", _errorMessage);
        }
    }

    private void GoBack()
    {
        var backStateSegment = _originalState == WorkingState.Archived ? "archived" : "working";
        Navigation.NavigateTo($"/resources/{backStateSegment}");
    }

    private string GetMessageFromApiError(string errorContent)
    {
        string apiErrorMessage = errorContent;

        try
        {
            // Пытаемся распарсить JSON из тела ответа
            using var document = JsonDocument.Parse(errorContent);
            var root = document.RootElement;

            // Проверяем, есть ли свойство "message"
            if (root.TryGetProperty("message", out var messageElement))
            {
                apiErrorMessage = messageElement.GetString() ?? apiErrorMessage;
            }
        }
        catch (JsonException ex)
        {
            Logger.LogError("Ошибка при парсинге JSON ошибки: {ExMessage}. Исходная ошибка: {ErrorContent}", ex.Message, errorContent);
        }

        return apiErrorMessage;
    }

    private static bool IsEmpty(string s)
    {
        return s.Trim().Length == 0;
    }
}